# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.34
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _ClipboardBackend
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _ClipboardBackend.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _ClipboardBackend.PySwigIterator_value(*args)
    def incr(*args): return _ClipboardBackend.PySwigIterator_incr(*args)
    def decr(*args): return _ClipboardBackend.PySwigIterator_decr(*args)
    def distance(*args): return _ClipboardBackend.PySwigIterator_distance(*args)
    def equal(*args): return _ClipboardBackend.PySwigIterator_equal(*args)
    def copy(*args): return _ClipboardBackend.PySwigIterator_copy(*args)
    def next(*args): return _ClipboardBackend.PySwigIterator_next(*args)
    def previous(*args): return _ClipboardBackend.PySwigIterator_previous(*args)
    def advance(*args): return _ClipboardBackend.PySwigIterator_advance(*args)
    def __eq__(*args): return _ClipboardBackend.PySwigIterator___eq__(*args)
    def __ne__(*args): return _ClipboardBackend.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _ClipboardBackend.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _ClipboardBackend.PySwigIterator___isub__(*args)
    def __add__(*args): return _ClipboardBackend.PySwigIterator___add__(*args)
    def __sub__(*args): return _ClipboardBackend.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _ClipboardBackend.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _ClipboardBackend.IntVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _ClipboardBackend.IntVector___nonzero__(*args)
    def __len__(*args): return _ClipboardBackend.IntVector___len__(*args)
    def pop(*args): return _ClipboardBackend.IntVector_pop(*args)
    def __getslice__(*args): return _ClipboardBackend.IntVector___getslice__(*args)
    def __setslice__(*args): return _ClipboardBackend.IntVector___setslice__(*args)
    def __delslice__(*args): return _ClipboardBackend.IntVector___delslice__(*args)
    def __delitem__(*args): return _ClipboardBackend.IntVector___delitem__(*args)
    def __getitem__(*args): return _ClipboardBackend.IntVector___getitem__(*args)
    def __setitem__(*args): return _ClipboardBackend.IntVector___setitem__(*args)
    def append(*args): return _ClipboardBackend.IntVector_append(*args)
    def empty(*args): return _ClipboardBackend.IntVector_empty(*args)
    def size(*args): return _ClipboardBackend.IntVector_size(*args)
    def clear(*args): return _ClipboardBackend.IntVector_clear(*args)
    def swap(*args): return _ClipboardBackend.IntVector_swap(*args)
    def get_allocator(*args): return _ClipboardBackend.IntVector_get_allocator(*args)
    def begin(*args): return _ClipboardBackend.IntVector_begin(*args)
    def end(*args): return _ClipboardBackend.IntVector_end(*args)
    def rbegin(*args): return _ClipboardBackend.IntVector_rbegin(*args)
    def rend(*args): return _ClipboardBackend.IntVector_rend(*args)
    def pop_back(*args): return _ClipboardBackend.IntVector_pop_back(*args)
    def erase(*args): return _ClipboardBackend.IntVector_erase(*args)
    def __init__(self, *args): 
        this = _ClipboardBackend.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _ClipboardBackend.IntVector_push_back(*args)
    def front(*args): return _ClipboardBackend.IntVector_front(*args)
    def back(*args): return _ClipboardBackend.IntVector_back(*args)
    def assign(*args): return _ClipboardBackend.IntVector_assign(*args)
    def resize(*args): return _ClipboardBackend.IntVector_resize(*args)
    def insert(*args): return _ClipboardBackend.IntVector_insert(*args)
    def reserve(*args): return _ClipboardBackend.IntVector_reserve(*args)
    def capacity(*args): return _ClipboardBackend.IntVector_capacity(*args)
    __swig_destroy__ = _ClipboardBackend.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _ClipboardBackend.IntVector_swigregister
IntVector_swigregister(IntVector)

init = _ClipboardBackend.init
shutdown = _ClipboardBackend.shutdown
prepareForPasting = _ClipboardBackend.prepareForPasting
waitForPaste = _ClipboardBackend.waitForPaste
finalizePasting = _ClipboardBackend.finalizePasting
prepareForClipboardToChange = _ClipboardBackend.prepareForClipboardToChange
hasClipboardChanged = _ClipboardBackend.hasClipboardChanged
waitForClipboardToChange = _ClipboardBackend.waitForClipboardToChange


